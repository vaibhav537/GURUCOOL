import "../styles/globals.css";
import Navbar from "./components/Navbar.jsx";
import Footer from "./components/Footer.jsx";
import { useRouter } from "next/router";
import { ThemeProvider } from "next-themes";
import { useEffect, useState } from "react";
import LoadingBar from "react-top-loading-bar";
import Loader from "./components/Loader";
import Head from "next/head";
import AOS from "aos";
import "aos/dist/aos.css";
import { SocketProvider } from "./context/SocketProvider";

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { asPath } = router;
  const noNav = [
    "/admin",
    "/teacher/selectcategory",
    "/admin/ifqRPHleaQkbEvmwOPEqb",
    "/admin/Addcategory",
    "/admin/DeleteCategory",
    "/admin/UpdateCategory",
    "/admin/ContactInfo",
    "/lobby/teacher",
    "/lobby/student",
    "/room/[room]",
  ];

  useEffect(() => {
    AOS.init({
      duration: 1000,
      once: true, // Animate only once when the user scrolls to an element
    });
  }, []);


  const [isLoading, setIsLoading] = useState(true);
  const [teacher, setTeacher] = useState({ value: null });
  const [student, setStudent] = useState({ value: null });
  const [user, setUser] = useState({ value: null });
  const [key, setKey] = useState(0);
  const [render, setRender] = useState(0);
  const [progress, setProgress] = useState(0);
  const [showMenu, setShowMenu] = useState(true);

  useEffect(() => {
    const disableRightClick = (event) => {
      if (event.button === 2) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
  
    document.addEventListener('contextmenu', disableRightClick);
  
    return () => {
      document.removeEventListener('contextmenu', disableRightClick);
    };
  }, []);

  useEffect(() => {
    const isNoNav =
      noNav.includes(router.pathname) || router.pathname.startsWith("/room/");

    setShowMenu(!isNoNav);
  }, [router.pathname, noNav]);

  useEffect(() => {
    router.events.on("routeChangeStart", () => {
      setProgress(40);
    });

    router.events.on("routeChangeComplete", () => {
      setProgress(100);
    });
    setTimeout(() => {
      setIsLoading(false);
    }, 2000);
    const teacherToken = localStorage.getItem("teacher-token");
    const studentToken = localStorage.getItem("student-token");
    if (teacherToken) {
      setTeacher({ value: teacherToken });
      setUser({ value: "THEREISUSER" });
      setKey(Math.random());
    }
    if (studentToken) {
      setStudent({ value: studentToken });
      setUser({ value: "THEREISUSER" });
      setKey(Math.random());
    }
  }, [router.query]);

  const logout = () => {
    localStorage.removeItem("teacher-token");
    localStorage.removeItem("student-token");
    setTeacher({ value: null });
    setUser({ value: null });
    setRender(Math.random());
    setKey(Math.random());
  };

  return (
    <>
      {isLoading ? (
        <>
          <Head>
            <title>GURU COOL</title>
            <meta
              name="description"
              content="Generated by developer for the who needs to be thier doubts and want to learn from the expert"
            />
            <link rel="icon" href="/images/logo.png" />
          </Head>
          <div className="flex items-center justify-center">
            <Loader />
          </div>
        </>
      ) : (
        <SocketProvider>
          <ThemeProvider attribute="class" enableSystem={true}>
            {showMenu && <Navbar key={key} user={user} logout={logout} />}
            <LoadingBar
              color="#000000"
              progress={progress}
              waitingTime={100}
              onLoaderFinished={() => setProgress(0)}
            />
            <Component
              {...pageProps}
              render={render}
              studentKam={student}
              teacherKam={teacher}
              logout={logout}
            />
            {showMenu && (
              <Footer student={student} teacher={teacher} render={render} />
            )}
          </ThemeProvider>
        </SocketProvider>
      )}
    </>
  );
}

export default MyApp;
